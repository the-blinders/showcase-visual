[{"id":0,"href":"/showcase-visual/docs/Final/","title":"Final","section":"Docs","content":" Entrega Final # "},{"id":1,"href":"/showcase-visual/docs/Final/Shaders/","title":"Shaders","section":"Final","content":" Shaders # Shaders implementados # Shader estático # Shader dinámico # "},{"id":2,"href":"/showcase-visual/docs/Integrantes/","title":"Integrantes","section":"Docs","content":" Integrantes # "},{"id":3,"href":"/showcase-visual/docs/Integrantes/andres-bonilla-duarte/","title":"Andres Bonilla Duarte","section":"Integrantes","content":" Andres Bonilla Duarte # Intereses Academicos: # Un estudiante con inters en el arte, el cine y la música, en busqueda de posibilidad para usar la ingenieria y la programación para apoyar procesos artisticos. El trabajo en equipo, la gestión y gerencia de proyectos, junto con el desarrollo de software y el diseño gráfico son los intereses principales. Es Fundamental ver la capacidad y potencial que un buen equipo puede tener y los objetivos que este puede lograr. La inovación surge de la interaccion entre personas, la comunidad que creamos es nuestro mayor recurso tecnologico.\nPasatiempos: # Me interesa mucho el arte y la recreación: la música, el cine los videojuegos, el aire libre, montar en bicicleta, el dibujo y salir a compartir tiempo con mis amigos y familia.\nTaller 3: Shaders # Introducción # Shaders, son un gran elemento de software en la computación visual, un método para realizar gráficos por cómputo para diferentes tipos de poroyectos, aprovechando una serie de ventajas en el uso de recursos de hardware, principalmente el uso de GPUs. Un shader permite realizar operaciones que determinan las propiedades visuales de un píxel, de manera simultánea para todos los píxeles en el espacio proyectado. El uso de shader presenta ventajas en factores como el ratio de frames por segundo (FPS), la complejidad de los gráficos producidos es más rica, el costo en recursos energéticos y computacionales. veremos la aplicación de una textura sobre una superficie, como ejemplo.\nSe utilizará la herramienta P5.js como entorno, para explorar su arquitectura de shaders, los principales métodos para cargar y aplicar shaders a figuras y superficies, y practicar el uso de los recursos 3D y 2D de WEBGL\nMarco Teórico # En computación visual, un shader es un programa de cómputo que calcula los niveles apropiados de luz, oscuridad y color durante el renderizado de elementos gráficos tanto en 2D como 3D en un proceso conocido como shading. Los Shaders han evolucionado para realizar varias funciones especializadas en gráficos computacionales, como efectos especiales y post-producción de video, también aplicaciones generales o de todo propósito en el campo visual computacional.\nLos shaders tradicionalmente calculan los efectos utilizando hardware gráfico que está especializado para ser un pipeline con alto grado de flexibilidad. Se utiliza la unidad de proceso gráfico (GPU) La posición y el color (hue, saturación, brillo y contraste) de todos los píxeles, vértices y/o texturas usados para construir un renderizado final de una imagen, pueden ser alterados utilizando algoritmos definidos en el shader, y pueden ser alterados según las operaciones y variables aplicadas en el programa shader.\nEl término “Shader” fue introducido al público por el estudio de animación Pixar, con la versión 3.0 de su “RenderMan Interface” especificación, publicado originalmente en mayo de 1988.\ntexture.vert # el archovo .vert es un segnemto de código que se ocupa de los vertex, toda la geometría y formas,como su posición en el canvas. Las figuras en 3D estan connectados, esto se conoce como \u0026ldquo;mesh\u0026rdquo; en p5, en este ejemplo se utilizó Spere() como superficie para aplicar el shader. Este archivo requiere, entre otras condiciones basicas de configuración, la variable gl_Position\ntexture.frag # El archivo .frag maeja todo lo relacionado con el color de los pixeles, termina con la variable de entorno: gl_FragColor\nDesarrollo # Explorando el ejemplo de shaders como texturas, encontrado en el excelente recurso: https://itp-xstory.github.io/p5js-shaders/#/. Se evidencian las facilidades para el estudio de shaders con la herramienta P5.\nsketch.js # En la función preload() es donde se establecen los archivos que componen el shader.\nfunction preload(){ // load the shader theShader = loadShader(\u0026#39;texture.vert\u0026#39;,\u0026#39;texture.frag\u0026#39;); } En la función setup() se establece el uso de WEBGL en el canvas y tambien en un onjeto p5.Renderer, creado con createGraphics() para aplicar nuestro shader mas adelante\n// initialize the createGraphics layers shaderTexture = createGraphics(710, 400, WEBGL); En la función draw() establecemos el shader como la textura para aplicar sobre las figuras en el canvas.\n// pass the shader as a texture // anything drawn after this will have this texture. texture(shaderTexture); texture.vert # // send the vertex information on to the fragment shader gl_Position = positionVec4; texture.frag # Comandos que nos poermiten intercambio de información en los namesapces del sketch.js y el mainde del achivo .frag\nuniform vec2 resolution; uniform float time; uniform vec2 mouse; Al final del main se retorna la variable gl_FragColor en forma de vec4, utilizando un vec3 para los primeros parametros, los que difinen numericamente el color. Ese vec3 utiliza las distintas funciones definidas en el archivo para generar este particular shader.\nvec3 color = vec3(concentricCircles(st, vec2(0.0,0.0), 5.0, 5.0),concentricCircles(st, vec2(0.0,0.0), 10.0, 10.0),concentricCircles(st, vec2(0.0,0.0), 20.0, 10.0)); gl_FragColor = vec4(color,1.0); Conclusiones # Es evidente el gran potencial que el uso del shader presenta para diversas aplicaciones en gráficos por computador, sigue siendo un campo de estudio reciente en cierta medida y sigue manteniendo mucho terreno sin explorar. El uso de Shaders puede considerarse como uno de los factores que ha permitido a la tecnologia soportar industrias digitales como el Cine y lo Videojuegos, evidenciando un valor como tecnología para los sectores digitales.\nEl estudio de shaders requiere la exploración de nuevos paradigmas y metodos para generar la interacción correcta entre los archivos .frag y .vert que componen el shader.\nTrabajo Futuro # Como seguiemiento en la exploración de este ejemplo, se buscará la busqueda de las capacidades del sistemas para aplicar el shader a mas numerosas y complejas superfecies en el espacio proyectado por el programa. El caso ideal seria encontrar efectos mejores y más interesantes, con el mejor rendimieto posible, desarrollando tanto la sensibilidad estitica como la logica de programación. Una vez se realizan ojetos con superficies que ietectuan con color y luz, se presenta la curiosidad respecto a las posibilidades de olisiones entre objetos y su representación en un entorno de simulación.\nReferencias # Ejemplo Shader como Textura sobre superficies 2D y 3D: https://itp-xstory.github.io/p5js-shaders/#/./docs/examples/shaders_to_shapes\ngithub.com/visualComputing/VertexShader https://itp-xstory.github.io/p5js-shaders/#/./docs/important-concepts\nhttps://www.shadertoy.com/playlist/featured\n"},{"id":4,"href":"/showcase-visual/docs/Integrantes/danny-garz%C3%B3n-melo/","title":"Danny Garzón Melo","section":"Integrantes","content":" Danny Esteban Garzon Melo # Intereses Academicos: # Me interesa la pedagogía y las ciencias de datos. Es gratificante transmitir conocimientos. También me interesa la algoritmia y la computación cuántica ya que son componentes muy teóricos de la carrera.\nPasatiempos: # Mis pasatiempos son la calistenia, cocinar, la pastelería, salir de fiesta y danzar.\n"},{"id":5,"href":"/showcase-visual/docs/Integrantes/jhon-acosta-murillo/","title":"Jhon Acosta Murillo","section":"Integrantes","content":" Jhon Fredy Acosta Murillo # Intereses Academicos: # Mis intereses académicos están relacionados con el desarrollo web, los sistemas inteligentes y la ciencia de datos. Esto años he aprendido un poco de cada uno, que a su vez fueron intereses que no sabía que tenía al momento de iniciar la carrera. Ha sido gratificante ver cuántos aportes ha realizado esta carrera al mundo y todo lo que aún hay por hacer.\nPasatiempos: # Mis pasatiempos son la producción musical, jugar videojuegos, viajar/acampar, compartir tiempo con mis amigos y familia y comer.\n"},{"id":6,"href":"/showcase-visual/docs/Integrantes/juan-david-sandoval/","title":"Juan David Sandoval","section":"Integrantes","content":" Juan David Sandoval # Intereses Academicos: # Soy un estudiante bastante apasionado por la carrera, mis intereses academicos se enfocan mas en las partes teoricas como las matematicas y la fisica relacionadas a la misma, la programacion no se me dio bien en el principio pero ahora tambien es algo muy impotante en mi vida porque disfruto mucho mirar al pasado y ver lenguajes de programacion que antes no sabia usar y ahora parece tan natural usarlos, asumir nuevos retos siempre es muy interesante y alentador a continuar a seguir aprendiendo.\nPasatiempos: # Mis pasatiempos mas importantes son competir en juegos online cuando tengo tiempo libre, leer o escuchar audiolibros de motivacion como el Poder Sin Limites de Anthony Robbins, leer Manga, ver Anime y leer novelas ligeras, salir a comer con mi familia los fines de semana y en algunas ocasiones salir a hablar con mis amigos.\nTrabajo Final: # Introduccion: # Para esta entrega se proponen 4 ejercicios por parte del profesor acerca de diferentes temas pero con el mismo transfondo el cual es los shader para rellenar figuras\nDesarrollo: # Ejercicio 1: # Para el ejercicio uno se necesito entender primeramente el primer ejemplo que nos da el profesor acerca de Texturing y shaders del UV Visualizaction y seguir los pasos hasta convertirlo en el UV Screen, si no se hacia el debido procedimiento y se intenta copiar y pegar desde el ultimo ejemplo en UV Screen para trabajar este no renderiza ningun color incluso despues de arreglar todos los errores que se puedan presentar en el p5. Luego de tener el ejemplo completamente funcional se implemento otro slider el cual cambia el color del shader mediante un uniform para pdoer incluir el color azul en el shader, tambien se implemento un checkbox llamado filtro en el cual se dejo por default un filtro con una esfera y al usar el checkbox vuelve al filtro default con el que venia el ejemplo del profesor cumpliendo asi con el requerimiento de usar otras figuras diferentes al \u0026ldquo;quad\u0026rdquo; como filtros de pantalla\nEjercicio 2: # Para el ejercicio numero dos se intento usar de base el ejemplo dado por el profesor, se logro correr el ejemplo con algunas modificaciones debido a que el ejemplo original tenia errores y mostraba una pantalla negra, tambien se implemento 6 sliders los cuales los primeros 3 sirven para cuadrar el brightness de la imagen, los otros 3 slider pretendian dar valores para generar un color HSL y mezclar el luma, el brillo y los colores en la imagen, sin embargo esto no se logro por algunas cuestiones tecnicas y de tiempo por lo tanto se logro solo correr el ejemplo, usar otra imagen de base y modificar el brillo en la imagen.\nEjercicio 3: # No se realizo por cuestiones logisticas( en el grupo no se logro un consenso acerca de si la entrega iba a ser individual o grupal, lo cual genero un poco de confusion.) y de tiempo. Al intentar realizar el ejercicio los mayores impedimentos fueron de la inexistencia de un ejemplo base, la\nEjercicio 4: # Para el ejercicio numero 4 se necesito la ayuda del ejemplo del profesor y el libro \u0026ldquo;the book of shaders\u0026rdquo; de Patricio Gonzalez y Jen Lowe, buscando patrones se encontraron posibles soluciones como el \u0026ldquo;Islamic Star Pattern\u0026rdquo; trabajado en The Coding Train y mas tipos de patrones en internet sin embargo en estos no se hacia uso de shaderes por lo tanto se implemento un patron del libro the book of shaders y se uso otra figura 3D para visualizar el patron cumpliendo asi con el ejercicio propuesto\nConclusiones: # Estos ejercicios son muy interesantes y muy educativos en el uso de los shaders los cuales son muy importantes para un desarollador porque con ellos se puede optimizar el codigo, facilitar los procesos de textura y rellenado de forma, ademas de modificar videos y imagenes con la tecnica desesada.\nResultados: # Trabajo Futuro # En el futuro me gustaria poder terminar el ejercicio 3, aplicar un patron fractal para el ejercicio 4 y finalizar el ejercicio 2 agregando la opcion de modificar los colores con RGB y CMY para seguir con un aprendizaje continuo y autosuficiente, me gustaria poder publicar mis propios shaders en shadertoy para aportar a la comunidad debido a que al intentar investigar del tema se siente que el material que existe no es suficiente para explorar y satisfacer la curiosidad acerca del tema.\n"},{"id":7,"href":"/showcase-visual/docs/practicas/","title":"Practicas","section":"Docs","content":" Practicas # "},{"id":8,"href":"/showcase-visual/docs/practicas/Bibliografia/","title":"Bibliografia","section":"Practicas","content":" Referencias # En.wikipedia.org. 2022. Delaunay triangulation - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Delaunay_triangulation [Accessed 5 April 2022].\nEn.wikipedia.org. 2022. Voronoi diagram - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Voronoi_diagram [Accessed 5 April 2022].\nEn.wikipedia.org. 2022. Mach bands - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Mach_bands [Accessed 5 April 2022].\nEn.wikipedia.org. 2022. Perlin noise - Wikipedia. [online] Available at: https://en.wikipedia.org/wiki/Perlin_noise [Accessed 5 April 2022].\nExtremelearning.com.au. 2022. How to evenly distribute points on a sphere more effectively than the canonical Fibonacci Lattice | Extreme Learning. [online] Available at: http://extremelearning.com.au/how-to-evenly-distribute-points-on-a-sphere-more-effectively-than-the-canonical-fibonacci-lattice/ [Accessed 5 April 2022].\nEnlaces Adicionales\nhttp://extremelearning.com.au/how-to-evenly-distribute-points-on-a-sphere-more-effectively-than-the-canonical-fibonacci-lattice/ https://www.redblobgames.com/x/1842-delaunay-voronoi-sphere/ https://en.wikipedia.org/wiki/Delaunay_triangulation https://en.wikipedia.org/wiki/Voronoi_diagram https://en.wikipedia.org/wiki/Boris_Delaunay https://en.wikipedia.org/wiki/Mach_bands https://www.redblobgames.com/x/1842-delaunay-voronoi-sphere/ https://en.wikipedia.org/wiki/Perlin_noise\n"},{"id":9,"href":"/showcase-visual/docs/practicas/generaci%C3%B3n-de-terreno/","title":"Generación De Terreno","section":"Practicas","content":" Generación de terreno en una superficie esférica: # Terreno con Ruido de Perlin (Perlin Noise) # Perlin Noise es un tipo de ruido de gradiente que es usado para generar distribuciones que visualmente se asemejan al terreno natural comunicando su complejidad, su valor como herramienta ha sido aprovechada por artistas e innovadores para aumentar el realismo de sus representaciones, reflejando una apariencia irregular y semi aleatoria, pero en realidad sus partes geométricas sin iguales, aumentando su potencial para uso práctico. Como grupo seleccionamos esta aplicación como reto a desarrollar, buscamos implementar una generación de terreno sobre la superficie de una esfera.\nComo distribuir puntos en una esfera - Variación de Fibonacci Lattice # Resolver el problema de distribuir equitativamente puntos sobre una esfera ha sido explorado por diversos sectores de la matemática, Química, Computación Visual, análisis numérico, cristalografía, entre otros. A pesar de ser de interés para muchas áreas solo unas pocas de ellas en encontrar soluciones óptimas, dejando esta área buscando en la mayoría de los casos soluciones aproximadas optimizadas. La aplicación tradicional de Fibonacci Lattice cuenta con dos problemas fundamentales, uno es que este mapeo conserva las áreas pero no las distancias, haciéndo lo mal candidato para solucionar problemas de optimización de distancia. El segundo es que geométricamente la distribución cuenta con un punto de singularidad en cada uno de los polos, en caso de la esfera.\nDiagrama Voronoi # Se considera un diagrama de Voronoi a una partición de un plano en regiones cercanos a un conjunto de objetos, en el caso más sencillo es un conjunto de puntos en el plano a manera de objetos llamados semillas que se relacionan cada una con una región llamada una celda de Voronoi\nDelaunay Triangulation y su Aplicación en una Esfera # La triangulación de Delanuay es proceso que maximiza el ángulo mínimo de todos los triángulos de la triangulación, la distribución es nombrada en honor a Boris Delaunay en 1934\nEl problema a solucionar es la aparición de patrones de distribución notablemente diferentes cerca de los polos de la esfera al utilizar distribuciones como la de fibonacci. Podemos utilizar triangulación de Delaunay para encontrar una mejor distribución de los puntos sobre la esfera, este proceso puede ser aplicado siguiendo tres pasos: proyectar los puntos iniciales de la esfera sobre un plano, sobre los puntos del plano se lleva a cabo la triangulación de Delaunay para modificar los datos de entrada y no la librería 2D a 3D, por último se enrollan los puntos del plano nuevamente a la superficie de la esfera.\nSobre uno de los polos de la esfera se produce un área en donde los planos al límite del plano forman un polígono que debe completarse para cubrir completamente el área de la esfera.\nFenomeno Visual: Bandas de Mach (en progreso) # Es una ilusión visual que detona la detección de bordes o fronteras en el ojo humano, al colocar consecutivamente bandas de ligeramente diferentes tonos de grises, se experimenta la percepción de tener bordes más acentuados entre ellos. El fenómeno fue identificado en 1865 por el físico Ernst Mach que conjeturó que esta ilusión óptica se origina en el proceso llevado en la retina que practica inhibición lateral entre sus neuronas. El conocimiento de este efecto es importante en campos como la radiología, en donde es un factor para determinar en, un estudio radiológico, síntomas de desgaste, límites entre materiales o en ocasiones al mal diagnóstico de síntomas de neumotórax. En la computación visual lo encontramos como un concepto prominente al ser usado en la generación de gradientes y verse reflejado en métodos como el unsharp masking que realiza la detección de bordes de manera homóloga a la visión humana.\nConclusiones y Trabajo Futuro # En el área de la computación visual el estudio de distribuciones uniformes de puntos sobre superficies tiene un impacto contundente en el desarrollo de sistemas que permitan desplegar visualizaciones de terrenos y superficies con características realistas, Buscando optimizar el rendimiento computacional, con el usos de geometrías regulares de triángulos distribuidos. En el salto de 2D a 3D deben tenerse en cuenta factores como disponibilidad de herramientas o librerias geometricas, y con la transición de modelos matemáticos efectivos sobre el plano para el uso en solidos, dado que al someter esta geometría sólida la búsqueda de una distribución podemos encontrar problemas de Optimización y de área de cobertura sobre nuestro sólido. En la actualidad las aplicaciones visuales en tecnologias incluyen la realidad virtual y aumentada, el desarrollo de videojuegos, representación geogréfica, entre otros.\n"},{"id":10,"href":"/showcase-visual/docs/practicas/ilusi%C3%B3n-optica/","title":"Ilusión Optica","section":"Practicas","content":" Ilusión optica: Patron de Muare # es un patrón de interferencia que se forma cuando se superponen dos rejillas de líneas, ya sean rectas o curvas, con un cierto ángulo2​ o cuando tales rejillas tienen tamaños ligeramente diferentes.\nIlusion optica: Hay movimiento? # El cerebro solo puede concentrarse en un solo objeto a la vez lo que genera la ilusion de tener una imagen en movimiento.\n"},{"id":11,"href":"/showcase-visual/docs/practicas/Logs/","title":"Logs","section":"Practicas","content":" Logs # Retroalimentación en clase: # 04/04/2022: # Nuestra práctica de sólidos platónicos debe ser mejorada, ya que solo muestra uno de los sólidos.\n16/05/2022: # Sobre workshops: # Juan David y Jhon Fredy preguntan aclaraciones sobre talleres al profesor Jean Pierre.\nPosterior a esto Juan y Jhon distribuyen los talleres dentro de los miembros del grupo de la siguiente manera:\nJuan David Sandoval: Cubos con sistemas relativos y 3D GUI Andrés Bonilla: investigación sobre 3D GUI Danny Garzón: Aplicación conceptual de Ray Tracing Jhon Acosta: Brsuhes interactivas a gestos 2D a 3D "},{"id":12,"href":"/showcase-visual/docs/practicas/Ray-Tracing/","title":"Ray Tracing","section":"Practicas","content":" Ray Tracing y Ray Casting # ¿Qué es el Ray Casting? # Es un algoritmo de renderizado que nunca traza recursivamente rayos secundarios, mientras que otros métodos de renderizado basados en ray tracing tienden a hacerlo.\n¿Qué es el Ray Tracing? # Ray Tracing es una tecnología que se encarga de mejorar las iluminaciones, sombras y reflejos de los videojuegos. Las palabras Ray Tracing significan en español trazado de rayos, haciendo referencia a un mucho mejor cálculo de los reflejos y sombras creados por las iluminaciones del entorno. Con este algoritmo, las escenas en los videojuegos se acercan más a la realidad pero también tienen sus desventajas, y es que el rendimiento en FPS globales se ve bastante penalizado. En la actualidad algunos juegos usan ray tracing en tiempo real gracias a los avances de NVIDIA y su arquitectura en la serie 2000 de tarjetas de video, un ejemplo de videojuego que usa ray tracing es: Sword and Fairy 7\nTrabajo Futuro # Al investigar se encuentra que lenguajes GPGPU como CUDA o OPENCL mediante la programacion paralela nos permiten con mas facilidad generar un ejemplo de ray tracing al tener mas soporte y ayudas para esto, se podria intentar realizar un ejemplo en estos lenguajes\n"},{"id":13,"href":"/showcase-visual/docs/practicas/s%C3%B3lidos-plat%C3%B3nicos/","title":"Sólidos Platónicos","section":"Practicas","content":" Prácticas # Sólido platónico: # Los solidos Platónicos son constituidos por cualquier solido que sea construido con caras regulares identicas en forma y tamaño, compartiendo los mismos angulos en tres dimensiones. También conocidos como los poliedros regulares, estan conformados por Tetraedro, Cubo, Octaedro, Dodecaedro e Icosaedro.\nReciben su nombre por el filosofo antiguo Platón, quien realizó hipótesis en uno de sus dialogos, el texto Timaeus (360 A.C.), alegando que estos solidos reprecentaban homologamente los elementos, agua, aire, fuego, tierra (y posteriormente Quintaesencia) clasicos que usaban como representación de las caracteristicas de la naturaleza.\nA continuación se presentan 2 sólidos: el cubo y el octaedro.\nLos 3 sliders ubicados a la izquierda son los parametros de velocidad de rotación sobre cada eje. El slide de la derecha es el parametro del número de vertices muestra seleccionados sobre la circunferencia.\n"},{"id":14,"href":"/showcase-visual/docs/shortcodes/","title":"Shortcodes","section":"Docs","content":" Shortcodes # "},{"id":15,"href":"/showcase-visual/docs/shortcodes/p5/Prueba/","title":"Prueba","section":"Shortcodes","content":"p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.\np5-Prueba # {{\u0026lt; p5-div ver=\u0026#34;1.4.1\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nScintillating grid # "},{"id":16,"href":"/showcase-visual/docs/Taller-2/3D-User-Interaction/","title":"3 D User Interaction","section":"Taller 2","content":" Introducción # En computación visual, una interacción en 3D se refiera a una interacción entre los usuarios y el sistema, en donde el usuario interactúa con elementos en espacios de tres dimensiones como imagen, sonido, sensación táctil y motora. Interacciones en donde, tanto para el humano como la máquina, la posición física de los elementos en tres dimensiones es relevante.\nLas nuevas tecnologías han posicionado esta área de estudio como uno de los campos con más potencial en interacciones sistema-usuario, dando la posibilidad de relacionarnos con la tecnología y la información, de manera natural para el ser humano y extendiendo distintas alternativas de usabilidad y accesibilidad , para usuarios con diferentes necesidades físicas y motoras.\nMarco Teórico # Antecedentes # Los antecedentes y el contexto de esta rama de estudio se remontan a la década de 1960, en donde varios pioneros en el mundo de la computación desarrollaron los primeros entornos de simulación para ambientes 3D. Hoy en día estas tecnologías han logrado desarrollarse con diversas aplicaciones, incluso para uso domestico en el área de entretenimiento que ha impulsado la industria del videojuego.\nSe desarrolló la maquina Sensorama por Morton Heilig, en la década del 1962, una de las piezas tecnológicas mas tempranas con el objetivo de inmersión multisensorial y es considerada uno de los primeros ejemplos de sistema de realidad virtual (VR).\nLas interacciones en tres dimensiones se relacionan de manera natural con la percepción de los seres humanos. Los sistemas cuentan con aparatos y técnicas de interacción, que trabajan en conjunto para el funcionamiento eficiente del sistema. La comunicación entre el sistema y el usuario es necesaria, diferentes dispositivos son usados para que el usuario configure el sistema, mientras que aplicaciones y servicios del sistema presentan información al usuario.\n3D User Interfaces # Las interfaces de usuario son los medios para la comunicación entre usuario y sistema. en 3D, las interfaces incluyen tanto representación del estado del sistema en tres dimensiones como elementos de interacción para manipular información en entornos tridimensionales. El usuario debe contar con los medios para realizar acciones en 3D, para este objetivo se han desarrollado dispositivos para soportar este tipo de interacciones.\nDisplays Táctiles 3D # Usan el sentido del tacto para establecer la interacción física entre el usuario y el objeto virtual, están catalogados en tres formas, aquellos que que proporcionan sensación de fuerza, los que simulan la sensación de contacto y los que usan ambos. Estos dispositivos cuentan con dos tipos fundamentales de acciones, kinésicas y táctiles.\nDisplays Auditivos 3D # Presentan información en la forma de sonido, se incluyen sistemas en donde se simula un entorno en tres dimensiones en el despliegue de sonido, permitiéndole a los usuarios interactuar con el espacio y utilizar habilidades psico acústicas para determinar posición y dirección de sonidos.\nDisplays Visuales 3D # Este es el tipo de dispositivo mas popular, si objetivo es presentar información producida por el sistema a través del sistema de visión humana en una manera tridimensional. Algunos de los campos más prominentes en esta área son, campo de visión, resolución espacial, geometría de pantalla, mecanismos de transferencia de luz, refresh-rates y ergonomía.\nSe pueden diferenciar con respecto a las categorias elementos de percepción de profundidad usados para lograr que el usuario pueda entender la información tridimensional. Los tipos mas comunes son: monitores, pantallas 4K, dispocitivos hemisféricos, visores Headset, virtual reality headsets, entre otros.\nTécnica de Interacción # Puede ser entendida como la combinación de elementos input/output de hardware y software, que le permiten al computador realizar una tarea determinada.\nDesde la perspectiva de un computador, una técnica de interacción involucra: dispositivos Input y Output. Además un elemento de software que: interprete el input del usuario a comandos coherentes para la máquina, producir feedback basado en el input y el estado del sistema.\nComo ejemplo, Los procesos cotidianos que se llevan a cabo en los computadores personales asumen la existencia de un mouse, pantalla, teclado y una pieza de código que imprime los diferentes menús e interacciones entre archivos.\nNavegación # El sistema debe proveer al usuario de información respecto a localización y movimiento. Atiende retos de conciencia espacial, efecto de movimiento entre distancias y navegación espacial viable para el usuario.\nSelección Y Manipulación # Selección de objetos virtuales en entornos de tres dimensiones para lograr al menos uno de los siguientes objetivos de operación: selección de objetos, posicionamiento de objetos o rotación de objetos. Permite una interacción con las figuras en espacios 3D de manera intuitiva y natural, al utilizar el movimiento de extremidades como, las manos, los brazos, la cabeza o los ojos, para interactuar con los parámetros de los objetos.\nControl del Sistema # Las técnicas de control de sistema permítanla usuario enviar comandos a la aplicación, ejecutar alguna funcionalidad, cambiar el estado del sistema o cambiar algún parámetro. herramientas comunes son, menús gráficos, comandos de voz, interacción con gestos, entre otros.\nResultados # Como grupo hemos encatrado intereses al rededor de las interacciones visuales y auditivas, encontramos un profundo interés por la música y esto profundiza la curiosidad por los sistemas que complementan los grandes espectáculos de música, que incluyen, pantallas con distintas distribuciones, espectáculos de luces laser en tres dimensiones, animaciones dinámicas geométricas en 3D, entre muchos otros elementos que transforman el espacio con la interacción sensorial.\nDesde la ingeniería se puede prestar apoyo tecnológico a los espacios artísticos que se apoyan en en sistemas de hardware para crear shows de música y luces, las posibilidades del lenguaje p5.js para crear un entorno de desarrollo compón para ingenieros y artistas invita al trabajo interdisciplinario, adicionalmente permite generar propuestas de innovación.\nEntre nuestros interés está encontrar aplicaciones de interacciones en 3D para construir shows de luces dinámicos, con diferentes efectos e interacciones con la música en reproducción.\nConclusión y Trabajo # Como punto de continuación, se debe profundizar la investigación en el estado del arte para los sistemas usados actualmente en la industria de producción audiovisual y conciertos, de esta manera establecer cuales son los antecedentes y la tendencia tecnológica. La experimentación con este tipo de sistemas involucra la interacción entre varios elementos, en este caso visuales y auditivos, dentro de un sistema progresivamente mas elaborado que los anteriores, en donde se permita la interacción de dichos elementos y el usuario. Las posibilidades se extienden al manejo de grandes displays y pantallas para la proyección de animaciones, espectáculos de luz laser y color, animaciones dinámicas que interactúan con las variaciones musicales, entre otros.\n"},{"id":17,"href":"/showcase-visual/docs/Taller-2/","title":"Taller 2","section":"Docs","content":" Taller 2 # "},{"id":18,"href":"/showcase-visual/docs/Taller-2/brush/","title":"Brush","section":"Taller 2","content":" Brush 3d en un desde un plano 2d # En esta práctica exploramos la adpatación de un trazo bidimensional como un trazo tridimensional.\nPartiendo del ejemplo mostrado en https://visualcomputing.github.io/docs/scene_trees/main_spaces/#3d-brush que permite trazar tridimensionalmente partiendo de un gesto bidimensional.\nGestos/velocidad # La manera en la que abordamos el problema fue obteniendo la velocidad a la que se desplaza el trazo y haciendo que el color, el tamaño de la brocha dependieran y la profundidad en la que se pinta dependieran de ello.\nLa entrada detectada por el programa puede ser por medio del puntero del mouse o por medio de la captura de gestos de la mano (pellizcos). Cada metodo de entrada tiene una interacción diferente para intercambiar entre brochas.\nEn términos de brochas, existen 2 brochas posibles:\nBrocha esférica con tonos cálidos (default) Brocha cúbica con tonos fríos Entradas # Entrada por mouse # La entrada por mouse (default) requiere que se presione la tecla R o r para activar/desactivar el trazo de la brocha.\nPara realizar cambio de brocha se require que se presione la tecla X o x.\nPara limpiar el lienzo se debe presionar la tecla C o c\nEntrada por gestos de mano en la cámara # La entrada por gestos de mano requiere que se activen los permisos de Acceso a la cámara en el navegador. Una vez activado, se debe posicionar la mano en frente de la cámara con la palma apuntando al lente.\nUna vez posicionada la mano, se activan los trazos sobre el lienzo realizando un pellizco. Entiendase por pellizco la acción de juntar el dedo pulgar con cualquier otro dedo de la mano.\nLa seleeción de la brocha de esta manera se identifica con el dedo de la mano con el que se realiza el pellizco:\nÍndice y central : brocha esférica tonos calidos. Anular y meñique: brocha cúbica con tonos fríos. Atributos de las brochas y reacción a interactividad # El tamaño de la figura 3d tiene como valor base 1, al cual se el suma un factor de 3 multiplicado por la velocidad del puntero mapeada de 0 a 1.\nEl color de los puntos estan en modo HSB , con el valor del Hue dependiente de la velocidad del mouse, mapeado de 5 a 220 para los tonos cálidos y de 200 a 360 para los tonos fríos.\nHSB Color mode Trabajo futuro # Desarrollar una paleta de pinceles más diversa que acepte diferentes tipos de interactividad más allá de la velocidad del puntero para modificar un conjunto de atributos más amplio que los modificados en este taller.\nAñadir más customización para los diferentes atributos de los trazos como los colores de los gradientes, tamaños de los objetos, etc\u0026hellip;\nExtrapolar la interactividad extendida para permitir una rotación del espacio tridimensional haciendo uso de otra mano.\nHerramientas externas usadas # (handsfree.js)\n"},{"id":19,"href":"/showcase-visual/docs/Taller-2/Convexhull/","title":"Convexhull","section":"Taller 2","content":" Problema de la cáscara # Cuando tenemos un conjunto de puntos en el espacio, podemos crear una cáscara. Esta cáscara es un poliedro con el menor número de vértices y caras posibles que cubra todos los puntos.\nLa esfera # El objetivo inicial se basaba en la generación de un espacio esférico, caracterizado por distribuir de manera no rectangular sus puntos en la superficie. para ello se buscó usar una diferente alternativa encontrando buenos resultados en la distribución de fibonnacci como se muestra a continuación:\nResolver el problema de distribuir equitativamente puntos sobre una esfera ha sido explorado por diversos sectores de la matemática, Química, Computación Visual, análisis numérico, cristalografía, entre otros. A pesar de ser de interés para muchas áreas solo unas pocas de ellas en encontrar soluciones óptimas, dejando esta área buscando en la mayoría de los casos soluciones aproximadas optimizadas. La aplicación tradicional de Fibonacci Lattice cuenta con dos problemas fundamentales, uno es que este mapeo conserva las áreas pero no las distancias, haciéndo lo mal candidato para solucionar problemas de optimización de distancia. El segundo es que geométricamente la distribución cuenta con un punto de singularidad en cada uno de los polos, en caso de la esfera. function EsferaFibonacci(x0, y0, z0, r, n) { const vertices = []; let numeroAureo = (1 + 5 ** 0.5) / 2; for (let i = 0; i \u0026lt; n; i++) { let θ = (2 * Math.PI * i) / numeroAureo; let φ = Math.acos(1 - (2 * (i + 0.5)) / n); let x = x0 + r * Math.cos(θ) * Math.sin(φ); let y = y0 + r * Math.sin(θ) * Math.sin(φ); let z = z0 + r * Math.cos(φ); vertices.push(new THREE.Vector3(x, y, z)); } return vertices; } La cáscara # Para generar el cascarón, debemos implementar una función que nos permita generar un poliedro con el menor número de vértices y caras posibles que cubra todos los puntos. usando una estrategia de divide y vencerás, dividimos los puntos iniciales en varios grupos con menor cantidad de puntos, y luego iteramos hasta que el número de vértices sea el mínimo posible para empezar a construir el poliedro.\nLuego combinamos las geometrías eliminando las caras y generando unas nuevas Trabajo futuro # Analizar y comprender las transformaciones geométricas dentro de three.js Embeber los scripts de Three.js dentro de esta página web. "},{"id":20,"href":"/showcase-visual/docs/Taller-2/Espacios-geometricos-Three.js/","title":"Espacios Geometricos Three.js","section":"Taller 2","content":" Espacios geométricos p5.js vs Three.js # Three.js es una biblioteca liviana escrita en JavaScript para crear y mostrar gráficos animados por computadora en 3D en un navegador Web y puede ser utilizada en conjunción con el elemento canvas de HTML5, SVG o WebGL. El código fuente está alojado en un repositorio en GitHub.\nSe ha popularizado como una de las más importantes para la creación de las animaciones en WebGL.\nRenderer # El elemento principal, Three.js es el renderer. El renderer es el responsable de renderizar la escena. debemos pasarle como parámetro una cámara inicial y una escena.\nCámara # Existen dos modos para crear una cámara:\nPerspectiva Ortogonal La cámara en perspectiva usa 4 parametros:\nFov: angulo de vision Aspect ratio: relacion de aspecto Near: distancia mínima Far: distancia máxima Similar a cómo se trabaja en p5.js, se puede crear una cámara con los siguientes métodos:\nconst camara = new THREE.PerspectiveCamera(fov, aspectRatio, near, far); La cámara en ortogonal usa 4 parametros:\nLeft: distancia a la izquierda Right: distancia a la derecha Top: distancia arriba Bottom: distancia abajo Near: distancia mínima Far: distancia máxima const camara = new THREE.OrthographicCamera(left, right, top, bottom, near, far); Escena # Las escenas le permiten configurar qué objetos y dónde se renderizarán. Aquí es donde colocas objetos, luces y cámaras.\nGrafo de escenas # El principal elemento de Three.js es posiblemente su grafo de escenas. Un grafo de escenas en un motor 3D funciona como una jerarquía de nodos en donde cada nodo representa un espacio local, similar a cómo se trabaja mediante transformaciones en p5.js.\n"},{"id":21,"href":"/showcase-visual/docs/Taller-2/Espacios-Relativos/","title":"Espacios Relativos","section":"Taller 2","content":" Espacios Relativos # En esta practiva vamos a ver diferentes espacios relativos representados por cubos.\nCreacion # Partiendo del ejemplo mostrado en https://visualcomputing.github.io/docs/scene_trees/main_spaces/#3d-gui que permite ver una gui 3d que esta visible en todo momento y tambien tiene espacios relativos, nos tomamos la libertad de hacer nuestro propio ejemplo modificando las figuras por cubos y poniendo diferente framerate y en diferente direccion para los cubos de color rojo con respecto al cubo del centro del sketch.\nDesafio para el lector # Esta el cubo rosado haciendo una rotacion distinta a los demas?\n"}]